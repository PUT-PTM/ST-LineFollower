
LineFollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	27 c0       	rjmp	.+78     	; 0x9a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
	
}

int main(void)
{
	DDRB |= (1<<PB1) | (1<<PB2);
  4e:	87 b3       	in	r24, 0x17	; 23
  50:	86 60       	ori	r24, 0x06	; 6
  52:	87 bb       	out	0x17, r24	; 23
	TCCR1A |= (1<<WGM10);
  54:	8f b5       	in	r24, 0x2f	; 47
  56:	81 60       	ori	r24, 0x01	; 1
  58:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);
  5a:	8f b5       	in	r24, 0x2f	; 47
  5c:	80 6a       	ori	r24, 0xA0	; 160
  5e:	8f bd       	out	0x2f, r24	; 47
	//TCCR1A |= (1<<COM1A0) | (1<<COM1B0);
	TCCR1B |= (1<<CS10) | (1<<CS11);
  60:	8e b5       	in	r24, 0x2e	; 46
  62:	83 60       	ori	r24, 0x03	; 3
  64:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0;
  66:	1b bc       	out	0x2b, r1	; 43
  68:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
  6a:	19 bc       	out	0x29, r1	; 41
  6c:	18 bc       	out	0x28, r1	; 40
	
	DDRD = 0b00001111;
  6e:	8f e0       	ldi	r24, 0x0F	; 15
  70:	81 bb       	out	0x11, r24	; 17
	//PORTC = 0b00010000;
	
	PORTD |= _BV(PD3);
  72:	93 9a       	sbi	0x12, 3	; 18
	PORTD &=~ _BV(PD2);
  74:	92 98       	cbi	0x12, 2	; 18
	PORTD |= _BV(PD0);
  76:	90 9a       	sbi	0x12, 0	; 18
	PORTD &=~ _BV(PD1);
  78:	91 98       	cbi	0x12, 1	; 18

	while (1)
	{
		 if (bit_is_clear(PIND, 6) || bit_is_clear(PIND, 5))
		 {
			 OCR1A = 255;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	90 e0       	ldi	r25, 0x00	; 0
	
	

	while (1)
	{
		 if (bit_is_clear(PIND, 6) || bit_is_clear(PIND, 5))
  7e:	86 9b       	sbis	0x10, 6	; 16
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x38>
  82:	85 99       	sbic	0x10, 5	; 16
  84:	05 c0       	rjmp	.+10     	; 0x90 <main+0x42>
		 {
			 OCR1A = 255;
  86:	9b bd       	out	0x2b, r25	; 43
  88:	8a bd       	out	0x2a, r24	; 42
			 OCR1B = 255;
  8a:	99 bd       	out	0x29, r25	; 41
  8c:	88 bd       	out	0x28, r24	; 40
  8e:	f7 cf       	rjmp	.-18     	; 0x7e <main+0x30>
		 }
		 else
		 {
			 OCR1A = 0;
  90:	1b bc       	out	0x2b, r1	; 43
  92:	1a bc       	out	0x2a, r1	; 42
			 OCR1B = 0;
  94:	19 bc       	out	0x29, r1	; 41
  96:	18 bc       	out	0x28, r1	; 40
  98:	f2 cf       	rjmp	.-28     	; 0x7e <main+0x30>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
